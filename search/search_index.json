{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Documentation # A responsive package for Buttons, DropMenus, Combinations and Paginator # \u2022 This module makes the process a lot easier ! # Join Official Discord Server for more guidance ! # Key Features # Buttons # DropMenus # Combinations (Usage of both Buttons & DropMenus) # Paginator #","title":"Home"},{"location":"#welcome_to_documentation","text":"","title":"Welcome to Documentation"},{"location":"#a_responsive_package_for_buttons_dropmenus_combinations_and_paginator","text":"","title":"A responsive package for Buttons, DropMenus, Combinations and Paginator"},{"location":"#this_module_makes_the_process_a_lot_easier","text":"","title":"\u2022 This module makes the process a lot easier !"},{"location":"#join_official_discord_server_for_more_guidance","text":"","title":"Join Official Discord Server for more guidance !"},{"location":"#key_features","text":"","title":"Key Features"},{"location":"#buttons","text":"","title":" Buttons "},{"location":"#dropmenus","text":"","title":" DropMenus "},{"location":"#combinations_usage_of_both_buttons_dropmenus","text":"","title":" Combinations (Usage of both Buttons &amp; DropMenus) "},{"location":"#paginator","text":"","title":" Paginator  "},{"location":"getting-started/","text":"Getting Started # Create a file with '.py ' extension, Like: main.py from btns_menus.Buttons import SButton, SingleButton from btns_menus.DropMenus import SDropMenu, DuoDropMenu from btns_menus.Combinations import BtnAndDropMenu, MultiBtnAndMenu import discord from discord.ext import commands intents = discord.Intents.all() activity = discord.Game(\"&help - phoenix\") client = commands.Bot(command_prefix=\"&\", intents=intents, activity=activity) @client.event async def on_ready(): await client.change_presence(status=discord.Status.online) print(\"Bot is Ready !\") @client.command() async def test(ctx): user = ctx.author btn1 = SButton(label=\"Hello\", response=\"Hello have a nice day !\") view_ = SingleButton(user, btn1).view() await ctx.send(\"click here !\", view=view_) if __name__ == \"__main__\": client.run('token')","title":"Getting Started"},{"location":"getting-started/#getting_started","text":"Create a file with '.py ' extension, Like: main.py from btns_menus.Buttons import SButton, SingleButton from btns_menus.DropMenus import SDropMenu, DuoDropMenu from btns_menus.Combinations import BtnAndDropMenu, MultiBtnAndMenu import discord from discord.ext import commands intents = discord.Intents.all() activity = discord.Game(\"&help - phoenix\") client = commands.Bot(command_prefix=\"&\", intents=intents, activity=activity) @client.event async def on_ready(): await client.change_presence(status=discord.Status.online) print(\"Bot is Ready !\") @client.command() async def test(ctx): user = ctx.author btn1 = SButton(label=\"Hello\", response=\"Hello have a nice day !\") view_ = SingleButton(user, btn1).view() await ctx.send(\"click here !\", view=view_) if __name__ == \"__main__\": client.run('token')","title":"Getting Started"},{"location":"installation/","text":"Installation # Python 3.8 or higher is required ! # Linux/macOS # python3 -m pip install discord-btns-menus Windows # Method-1 # py -3 -m pip install discord-btns-menus # or python -m pip install discord-btns-menus Method-2 # pip install discord-btns-menus GIT # Use GIT for installing Beta/ Latest versions pip install -U git+https://github.com/Modern-Realm/discord_btns_menus REQUIRED DEPENDENCIES # You can use ANY ONE of the below Package py-cord nextcord discord.pyV2.0 disnake For disnake you should Refactor all discord terms to disnake terms to make Package work Note: Don't install more than one DEPENDENCY !","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#python_38_or_higher_is_required","text":"","title":"Python 3.8 or higher is required !"},{"location":"installation/#linuxmacos","text":"python3 -m pip install discord-btns-menus","title":"Linux/macOS"},{"location":"installation/#windows","text":"","title":"Windows"},{"location":"installation/#method-1","text":"py -3 -m pip install discord-btns-menus # or python -m pip install discord-btns-menus","title":"Method-1"},{"location":"installation/#method-2","text":"pip install discord-btns-menus","title":"Method-2"},{"location":"installation/#git","text":"Use GIT for installing Beta/ Latest versions pip install -U git+https://github.com/Modern-Realm/discord_btns_menus","title":"GIT"},{"location":"installation/#required_dependencies","text":"You can use ANY ONE of the below Package py-cord nextcord discord.pyV2.0 disnake For disnake you should Refactor all discord terms to disnake terms to make Package work Note: Don't install more than one DEPENDENCY !","title":"REQUIRED DEPENDENCIES"},{"location":"about/CODE_OF_CONDUCT/","text":"Contributor Covenant Code of Conduct # Our Pledge # We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards # Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Enforcement Responsibilities # Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope # This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Enforcement # Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at skrphenix. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. Enforcement Guidelines # Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: 1. Correction # Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. 2. Warning # Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. 3. Temporary Ban # Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. 4. Permanent Ban # Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community. Attribution # This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.","title":"Code Of Conduct"},{"location":"about/CODE_OF_CONDUCT/#contributor_covenant_code_of_conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"about/CODE_OF_CONDUCT/#our_pledge","text":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.","title":"Our Pledge"},{"location":"about/CODE_OF_CONDUCT/#our_standards","text":"Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"about/CODE_OF_CONDUCT/#enforcement_responsibilities","text":"Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.","title":"Enforcement Responsibilities"},{"location":"about/CODE_OF_CONDUCT/#scope","text":"This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.","title":"Scope"},{"location":"about/CODE_OF_CONDUCT/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at skrphenix. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident.","title":"Enforcement"},{"location":"about/CODE_OF_CONDUCT/#enforcement_guidelines","text":"Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:","title":"Enforcement Guidelines"},{"location":"about/CODE_OF_CONDUCT/#1_correction","text":"Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.","title":"1. Correction"},{"location":"about/CODE_OF_CONDUCT/#2_warning","text":"Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.","title":"2. Warning"},{"location":"about/CODE_OF_CONDUCT/#3_temporary_ban","text":"Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.","title":"3. Temporary Ban"},{"location":"about/CODE_OF_CONDUCT/#4_permanent_ban","text":"Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community.","title":"4. Permanent Ban"},{"location":"about/CODE_OF_CONDUCT/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.","title":"Attribution"},{"location":"about/CONTRIBUTING/","text":"Contributing to discord-btns-menus # First off, thanks for taking the time to contribute. It makes the library substantially better. :+1: The following is a set of guidelines for contributing to the repository. These are guidelines, not hard rules. Good Bug Reports # Please be aware of the following things when filing bug reports. # Don't open duplicate issues. Please search your issue to see if it has been asked already. Duplicate issues will be closed. When filing a bug about exceptions or tracebacks, please include the complete traceback. Without the complete traceback the issue might be unsolvable and you will be asked to provide more information. Make sure to provide enough information to make the issue workable. The issue template will generally walk you through the process, but they are enumerated here as well: A summary of your bug report. This is generally a quick sentence or two to describe the issue in human terms. Guidance on how to reproduce the issue . Ideally, this should have a small code sample that allows us to run and see the issue for ourselves to debug. Please make sure that the token is not displayed . If you cannot provide a code snippet, then let us know what the steps were, how often it happens, etc. Tell us what you expected to happen . That way we can meet that expectation. Tell us what actually happens . What ends up happening in reality? It's not helpful to say \"it fails\" or \"it doesn't work\". Say how it failed, do you get an exception? Does it hang? How are the expectations different from reality? Tell us information about your environment . What version of pycord-btns-menus are you using? How was it installed? What operating system are you running on? These are valuable questions and information that we use. If the bug report is missing this information then it'll take us longer to fix the issue. We will probably ask for clarification, and barring that if no response was given then the issue will be closed. Please try your best not to ask questions in our issue tracker. Most of them don't belong there unless they provide value to a larger audience. Submitting a Pull Request # Submitting a pull request is fairly simple, just make sure it focuses on a single aspect and doesn't manage to have scope creep, and it's probably good to go. It would be incredibly lovely if the style is consistent to that found in the project. This project follows PEP-8 guidelines (mostly) with a column limit of 125. Licensing # By submitting a pull request, you agree that: You hold the copyright on all submitted code inside said pull request; You agree to transfer all rights to the owner of this repository, and; 3) If you are found to be in fault with any of the above, we shall not be held responsible in any way after the pull request has been merged. Contact Us # You can get support/help/guidance from below social-media links Home Page Official Discord Server PyPi Package Documentation Direct Links for Contributors # Open Issue / Pull Requests","title":"Contributing"},{"location":"about/CONTRIBUTING/#contributing_to_discord-btns-menus","text":"First off, thanks for taking the time to contribute. It makes the library substantially better. :+1: The following is a set of guidelines for contributing to the repository. These are guidelines, not hard rules.","title":"Contributing to discord-btns-menus"},{"location":"about/CONTRIBUTING/#good_bug_reports","text":"","title":"Good Bug Reports"},{"location":"about/CONTRIBUTING/#please_be_aware_of_the_following_things_when_filing_bug_reports","text":"Don't open duplicate issues. Please search your issue to see if it has been asked already. Duplicate issues will be closed. When filing a bug about exceptions or tracebacks, please include the complete traceback. Without the complete traceback the issue might be unsolvable and you will be asked to provide more information. Make sure to provide enough information to make the issue workable. The issue template will generally walk you through the process, but they are enumerated here as well: A summary of your bug report. This is generally a quick sentence or two to describe the issue in human terms. Guidance on how to reproduce the issue . Ideally, this should have a small code sample that allows us to run and see the issue for ourselves to debug. Please make sure that the token is not displayed . If you cannot provide a code snippet, then let us know what the steps were, how often it happens, etc. Tell us what you expected to happen . That way we can meet that expectation. Tell us what actually happens . What ends up happening in reality? It's not helpful to say \"it fails\" or \"it doesn't work\". Say how it failed, do you get an exception? Does it hang? How are the expectations different from reality? Tell us information about your environment . What version of pycord-btns-menus are you using? How was it installed? What operating system are you running on? These are valuable questions and information that we use. If the bug report is missing this information then it'll take us longer to fix the issue. We will probably ask for clarification, and barring that if no response was given then the issue will be closed. Please try your best not to ask questions in our issue tracker. Most of them don't belong there unless they provide value to a larger audience.","title":"Please be aware of the following things when filing bug reports."},{"location":"about/CONTRIBUTING/#submitting_a_pull_request","text":"Submitting a pull request is fairly simple, just make sure it focuses on a single aspect and doesn't manage to have scope creep, and it's probably good to go. It would be incredibly lovely if the style is consistent to that found in the project. This project follows PEP-8 guidelines (mostly) with a column limit of 125.","title":"Submitting a Pull Request"},{"location":"about/CONTRIBUTING/#licensing","text":"By submitting a pull request, you agree that: You hold the copyright on all submitted code inside said pull request; You agree to transfer all rights to the owner of this repository, and; 3) If you are found to be in fault with any of the above, we shall not be held responsible in any way after the pull request has been merged.","title":"Licensing"},{"location":"about/CONTRIBUTING/#contact_us","text":"You can get support/help/guidance from below social-media links Home Page Official Discord Server PyPi Package Documentation","title":"Contact Us"},{"location":"about/CONTRIBUTING/#direct_links_for_contributors","text":"Open Issue / Pull Requests","title":"Direct Links for Contributors"},{"location":"about/LICENSE/","text":"MIT License # Copyright (c) 2021 skrphenix # Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. We are not affiliated with Discord.","title":"License"},{"location":"about/LICENSE/#mit_license","text":"","title":"MIT License"},{"location":"about/LICENSE/#copyright_c_2021_skrphenix","text":"Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. We are not affiliated with Discord.","title":"Copyright (c) 2021 skrphenix"},{"location":"user-guide/buttons/","text":"Buttons # SButton # after_resp : Optional [ Dict ] property # It's a property used to get a dictionary of options which are to be changed after button click Returns: Name Type Description UpdatedOptions Optional [ Dict ] Dict if there is a query defined or else returns None args : Dict property # It's a property used to get kwargs of the button Aliases: ['args', 'kwargs'] Returns: Name Type Description Options Dict Dictionary of options of a Button author : Optional [ discord . Member ] property # It's a property used to get author of the button Returns: Name Type Description author Optional [ discord . Member ] returns a user obj if one exists hidden : bool property # It's a property used to get hidden parm of the button Returns: Name Type Description hidden bool id : Optional [ str ] property # It's a property used to get ID of the button Returns: Name Type Description custom_id Optional [ str ] Button ID is_ephemeral : bool property # It's a property used to check whether it's ephemeral or not Returns: Name Type Description ephemeral bool true, if the button response type is ephemeral or else false name : Optional [ str ] property # It's a property used to get label of the button Returns: Name Type Description label Optional [ str ] Label (or) emoji of the Button __init__ ( * , label = None , custom_id = None , disabled = False , style = ButtonStyle . secondary , url = None , emoji = None , row = None , content = None , response = None , rewrite = False , ephemeral = False , delete_msg = False , hidden = False , author = None , verify = True ) # It is a decorator used to create a Button overwriting ui.Button Parameters: Name Type Description Default label str Label of the Button None custom_id Optional [ str ] Unique ID of the Button None disabled bool It is used to enable/disable the Button, i.e. Preventing user from using it False style ButtonStyle Color of the Button ButtonStyle.secondary url Optional [ str ] Onclick Redirects to the given url None emoji Optional [ Union [ str , discord . Emoji , discord . PartialEmoji ]] Emoji for the Button None row Optional [ int ] Places the Button in given Row None content Optional [ str ] content of the message None response Optional [ Union [ str , discord . Embed ]] Sends the message (str/ embed) in user channel None rewrite bool It is used to send the message by editing the original message rather than sending a new one False ephemeral bool It is used to send the message where it's only visible to interacted user or to all False delete_msg bool Deletes the original message False hidden bool It hides the Button from View False author discord . Member Interaction User None verify bool It is used to make the func to check for author parameter or not True add_coro_func ( function , * args , ** kwargs ) async # It's an asynchronous function which stores same function type and adds the func to button for execution after getting clicked Parameters: Name Type Description Default function Callable takes asynchronous function required *args Any takes args of the function provided by a user () **kwargs Any takes kwargs of the function provided by a user {} add_func ( function , * args , ** kwargs ) # It's a function which stores same function type and adds the func to button for execution after getting clicked Parameters: Name Type Description Default function Callable takes a function required *args Any takes args of the function provided by a user () **kwargs Any takes kwargs of the function provided by a user {} after_response ( ** options ) # It's an event type function which changes the provided options after button ( onclick ) options are same as those in SButton Parameters: Name Type Description Default **options Any takes Button options {} Raises: Type Description ButtonException raises the exception if the option is invalid has_any_role ( * roles , error_msg = None ) # It's used to check whether the interaction user has any one of the mentioned roles of interaction guild Parameters: Name Type Description Default *roles Union [ int , str ] Takes either ID's or Name's of the roles of interaction guild () error_msg Union [ str , discord . Embed ] Sends a message to the user (Interaction.User) if the condition not satisfies None has_permissions ( * , error_msg = None , ** perms ) # It's used to check whether the interaction user has the mentioned permissions of the interaction guild/ channel Parameters: Name Type Description Default error_msg Union [ str , discord . Embed ] Sends a message to the interaction user if the condition not satisfies None **perms Any Takes the permissions flags (discord.Permissions.VALID_FLAGS) {} has_roles ( * roles , error_msg = None ) # It's used to check whether the interaction user has the mentioned roles of interaction guild Parameters: Name Type Description Default *roles Union [ int , str ] Takes either ID's or Name's of the roles of interaction guild () error_msg Union [ str , discord . Embed ] Sends a message to the user (Interaction.User) if the condition not satisfies None is_any_user ( * users , error_msg = None ) # It's used to check whether the interaction user is in mentioned users or not Parameters: Name Type Description Default *users Union [ str , int ] Takes either ID's or Name's of the members of interaction guild () error_msg Union [ str , discord . Embed ] Sends a message to the interaction user if the condition not satisfies None is_author ( error_msg = None ) # It's used to check whether the Interaction.user and SButton.author are same or not Parameters: Name Type Description Default error_msg Union [ str , discord . Embed ] Sends a message to the interaction user if the condition not satisfies None is_owner ( error_msg = None ) # It's used to check whether the interaction user is the owner of interaction guild Parameters: Name Type Description Default error_msg Union [ str , discord . Embed ] Sends a message to the user (Interaction.User) if the condition not satisfies None update ( ** options ) # Updates the options of the Button Parameters: Name Type Description Default **options Any takes Button options {} Raises: Type Description ButtonException raises the exception if the option is invalid update_one ( details , option ) # Updates the option of the Button Parameters: Name Type Description Default details Any Takes any datatype for updating required option str The option which should be overwritten required Raises: Type Description ButtonException raises the exception if the option is invalid Types of Buttons # here are some examples DuoButton # __init__ ( author , button1 , button2 , / , timeout = DEFAULT_TIMEOUT ) # Responsive Buttons Parameters: Name Type Description Default author discord . Member Interaction User required button1 SButton Takes Button Type SButton required button2 SButton Takes Button Type SButton required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT view () # Returns: Name Type Description view ui . View discord.ui.View MultiButton # __init__ ( author , buttons , / , timeout = DEFAULT_TIMEOUT ) # Responsive Buttons Parameters: Name Type Description Default author discord . Member Interaction User required buttons List [ SButton ] Takes Button Type SButton required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT view () # Returns: Name Type Description view ui . View discord.ui.View QuartetButton # __init__ ( author , button1 , button2 , button3 , button4 , / , timeout = DEFAULT_TIMEOUT ) # Responsive Buttons Parameters: Name Type Description Default author discord . Member Interaction User required button1 SButton Takes Button Type SButton required button2 SButton Takes Button Type SButton required button3 SButton Takes Button Type SButton required button4 SButton Takes Button Type SButton required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT view () # Returns: Name Type Description view ui . View discord.ui.View QuintetButton # __init__ ( author , button1 , button2 , button3 , button4 , button5 , / , timeout = DEFAULT_TIMEOUT ) # Responsive Buttons Parameters: Name Type Description Default author discord . Member Interaction User required button1 SButton Takes Button Type SButton required button2 SButton Takes Button Type SButton required button3 SButton Takes Button Type SButton required button4 SButton Takes Button Type SButton required button5 SButton Takes Button Type SButton required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT view () # Returns: Name Type Description view ui . View discord.ui.View SingleButton # __init__ ( author , button1 , / , timeout = DEFAULT_TIMEOUT ) # Responsive Button Parameters: Name Type Description Default author discord . Member Interaction User required button1 SButton Takes Button Type SButton required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT view () # Returns: Name Type Description view ui . View discord.ui.View TrioButton # __init__ ( author , button1 , button2 , button3 , / , timeout = DEFAULT_TIMEOUT ) # Responsive Buttons Parameters: Name Type Description Default author discord . Member Interaction User required button1 SButton Takes Button Type SButton required button2 SButton Takes Button Type SButton required button3 SButton Takes Button Type SButton required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT view () # Returns: Name Type Description view ui . View discord.ui.View","title":"Buttons"},{"location":"user-guide/buttons/#buttons","text":"","title":"Buttons"},{"location":"user-guide/buttons/#sbutton","text":"","title":"SButton"},{"location":"user-guide/buttons/#btns_menus.builds.button_.SButton.after_resp","text":"It's a property used to get a dictionary of options which are to be changed after button click Returns: Name Type Description UpdatedOptions Optional [ Dict ] Dict if there is a query defined or else returns None","title":"after_resp"},{"location":"user-guide/buttons/#btns_menus.builds.button_.SButton.args","text":"It's a property used to get kwargs of the button Aliases: ['args', 'kwargs'] Returns: Name Type Description Options Dict Dictionary of options of a Button","title":"args"},{"location":"user-guide/buttons/#btns_menus.builds.button_.SButton.author","text":"It's a property used to get author of the button Returns: Name Type Description author Optional [ discord . Member ] returns a user obj if one exists","title":"author"},{"location":"user-guide/buttons/#btns_menus.builds.button_.SButton.hidden","text":"It's a property used to get hidden parm of the button Returns: Name Type Description hidden bool","title":"hidden"},{"location":"user-guide/buttons/#btns_menus.builds.button_.SButton.id","text":"It's a property used to get ID of the button Returns: Name Type Description custom_id Optional [ str ] Button ID","title":"id"},{"location":"user-guide/buttons/#btns_menus.builds.button_.SButton.is_ephemeral","text":"It's a property used to check whether it's ephemeral or not Returns: Name Type Description ephemeral bool true, if the button response type is ephemeral or else false","title":"is_ephemeral"},{"location":"user-guide/buttons/#btns_menus.builds.button_.SButton.name","text":"It's a property used to get label of the button Returns: Name Type Description label Optional [ str ] Label (or) emoji of the Button","title":"name"},{"location":"user-guide/buttons/#btns_menus.builds.button_.SButton.__init__","text":"It is a decorator used to create a Button overwriting ui.Button Parameters: Name Type Description Default label str Label of the Button None custom_id Optional [ str ] Unique ID of the Button None disabled bool It is used to enable/disable the Button, i.e. Preventing user from using it False style ButtonStyle Color of the Button ButtonStyle.secondary url Optional [ str ] Onclick Redirects to the given url None emoji Optional [ Union [ str , discord . Emoji , discord . PartialEmoji ]] Emoji for the Button None row Optional [ int ] Places the Button in given Row None content Optional [ str ] content of the message None response Optional [ Union [ str , discord . Embed ]] Sends the message (str/ embed) in user channel None rewrite bool It is used to send the message by editing the original message rather than sending a new one False ephemeral bool It is used to send the message where it's only visible to interacted user or to all False delete_msg bool Deletes the original message False hidden bool It hides the Button from View False author discord . Member Interaction User None verify bool It is used to make the func to check for author parameter or not True","title":"__init__()"},{"location":"user-guide/buttons/#btns_menus.builds.button_.SButton.add_coro_func","text":"It's an asynchronous function which stores same function type and adds the func to button for execution after getting clicked Parameters: Name Type Description Default function Callable takes asynchronous function required *args Any takes args of the function provided by a user () **kwargs Any takes kwargs of the function provided by a user {}","title":"add_coro_func()"},{"location":"user-guide/buttons/#btns_menus.builds.button_.SButton.add_func","text":"It's a function which stores same function type and adds the func to button for execution after getting clicked Parameters: Name Type Description Default function Callable takes a function required *args Any takes args of the function provided by a user () **kwargs Any takes kwargs of the function provided by a user {}","title":"add_func()"},{"location":"user-guide/buttons/#btns_menus.builds.button_.SButton.after_response","text":"It's an event type function which changes the provided options after button ( onclick ) options are same as those in SButton Parameters: Name Type Description Default **options Any takes Button options {} Raises: Type Description ButtonException raises the exception if the option is invalid","title":"after_response()"},{"location":"user-guide/buttons/#btns_menus.builds.button_.SButton.has_any_role","text":"It's used to check whether the interaction user has any one of the mentioned roles of interaction guild Parameters: Name Type Description Default *roles Union [ int , str ] Takes either ID's or Name's of the roles of interaction guild () error_msg Union [ str , discord . Embed ] Sends a message to the user (Interaction.User) if the condition not satisfies None","title":"has_any_role()"},{"location":"user-guide/buttons/#btns_menus.builds.button_.SButton.has_permissions","text":"It's used to check whether the interaction user has the mentioned permissions of the interaction guild/ channel Parameters: Name Type Description Default error_msg Union [ str , discord . Embed ] Sends a message to the interaction user if the condition not satisfies None **perms Any Takes the permissions flags (discord.Permissions.VALID_FLAGS) {}","title":"has_permissions()"},{"location":"user-guide/buttons/#btns_menus.builds.button_.SButton.has_roles","text":"It's used to check whether the interaction user has the mentioned roles of interaction guild Parameters: Name Type Description Default *roles Union [ int , str ] Takes either ID's or Name's of the roles of interaction guild () error_msg Union [ str , discord . Embed ] Sends a message to the user (Interaction.User) if the condition not satisfies None","title":"has_roles()"},{"location":"user-guide/buttons/#btns_menus.builds.button_.SButton.is_any_user","text":"It's used to check whether the interaction user is in mentioned users or not Parameters: Name Type Description Default *users Union [ str , int ] Takes either ID's or Name's of the members of interaction guild () error_msg Union [ str , discord . Embed ] Sends a message to the interaction user if the condition not satisfies None","title":"is_any_user()"},{"location":"user-guide/buttons/#btns_menus.builds.button_.SButton.is_author","text":"It's used to check whether the Interaction.user and SButton.author are same or not Parameters: Name Type Description Default error_msg Union [ str , discord . Embed ] Sends a message to the interaction user if the condition not satisfies None","title":"is_author()"},{"location":"user-guide/buttons/#btns_menus.builds.button_.SButton.is_owner","text":"It's used to check whether the interaction user is the owner of interaction guild Parameters: Name Type Description Default error_msg Union [ str , discord . Embed ] Sends a message to the user (Interaction.User) if the condition not satisfies None","title":"is_owner()"},{"location":"user-guide/buttons/#btns_menus.builds.button_.SButton.update","text":"Updates the options of the Button Parameters: Name Type Description Default **options Any takes Button options {} Raises: Type Description ButtonException raises the exception if the option is invalid","title":"update()"},{"location":"user-guide/buttons/#btns_menus.builds.button_.SButton.update_one","text":"Updates the option of the Button Parameters: Name Type Description Default details Any Takes any datatype for updating required option str The option which should be overwritten required Raises: Type Description ButtonException raises the exception if the option is invalid","title":"update_one()"},{"location":"user-guide/buttons/#types_of_buttons","text":"here are some examples","title":"Types of Buttons"},{"location":"user-guide/buttons/#btns_menus.Buttons.DuoButton","text":"","title":"DuoButton"},{"location":"user-guide/buttons/#btns_menus.Buttons.DuoButton.__init__","text":"Responsive Buttons Parameters: Name Type Description Default author discord . Member Interaction User required button1 SButton Takes Button Type SButton required button2 SButton Takes Button Type SButton required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT","title":"__init__()"},{"location":"user-guide/buttons/#btns_menus.Buttons.DuoButton.view","text":"Returns: Name Type Description view ui . View discord.ui.View","title":"view()"},{"location":"user-guide/buttons/#btns_menus.Buttons.MultiButton","text":"","title":"MultiButton"},{"location":"user-guide/buttons/#btns_menus.Buttons.MultiButton.__init__","text":"Responsive Buttons Parameters: Name Type Description Default author discord . Member Interaction User required buttons List [ SButton ] Takes Button Type SButton required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT","title":"__init__()"},{"location":"user-guide/buttons/#btns_menus.Buttons.MultiButton.view","text":"Returns: Name Type Description view ui . View discord.ui.View","title":"view()"},{"location":"user-guide/buttons/#btns_menus.Buttons.QuartetButton","text":"","title":"QuartetButton"},{"location":"user-guide/buttons/#btns_menus.Buttons.QuartetButton.__init__","text":"Responsive Buttons Parameters: Name Type Description Default author discord . Member Interaction User required button1 SButton Takes Button Type SButton required button2 SButton Takes Button Type SButton required button3 SButton Takes Button Type SButton required button4 SButton Takes Button Type SButton required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT","title":"__init__()"},{"location":"user-guide/buttons/#btns_menus.Buttons.QuartetButton.view","text":"Returns: Name Type Description view ui . View discord.ui.View","title":"view()"},{"location":"user-guide/buttons/#btns_menus.Buttons.QuintetButton","text":"","title":"QuintetButton"},{"location":"user-guide/buttons/#btns_menus.Buttons.QuintetButton.__init__","text":"Responsive Buttons Parameters: Name Type Description Default author discord . Member Interaction User required button1 SButton Takes Button Type SButton required button2 SButton Takes Button Type SButton required button3 SButton Takes Button Type SButton required button4 SButton Takes Button Type SButton required button5 SButton Takes Button Type SButton required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT","title":"__init__()"},{"location":"user-guide/buttons/#btns_menus.Buttons.QuintetButton.view","text":"Returns: Name Type Description view ui . View discord.ui.View","title":"view()"},{"location":"user-guide/buttons/#btns_menus.Buttons.SingleButton","text":"","title":"SingleButton"},{"location":"user-guide/buttons/#btns_menus.Buttons.SingleButton.__init__","text":"Responsive Button Parameters: Name Type Description Default author discord . Member Interaction User required button1 SButton Takes Button Type SButton required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT","title":"__init__()"},{"location":"user-guide/buttons/#btns_menus.Buttons.SingleButton.view","text":"Returns: Name Type Description view ui . View discord.ui.View","title":"view()"},{"location":"user-guide/buttons/#btns_menus.Buttons.TrioButton","text":"","title":"TrioButton"},{"location":"user-guide/buttons/#btns_menus.Buttons.TrioButton.__init__","text":"Responsive Buttons Parameters: Name Type Description Default author discord . Member Interaction User required button1 SButton Takes Button Type SButton required button2 SButton Takes Button Type SButton required button3 SButton Takes Button Type SButton required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT","title":"__init__()"},{"location":"user-guide/buttons/#btns_menus.Buttons.TrioButton.view","text":"Returns: Name Type Description view ui . View discord.ui.View","title":"view()"},{"location":"user-guide/combinations/","text":"Combinations # combining of both buttons and dropmenus Btn2And2DropMenu # __init__ ( author , button1 , button2 , menu1 , menu2 , * , timeout = DEFAULT_TIMEOUT ) # Responsive Buttons and DropMenus Parameters: Name Type Description Default author discord . Member Interaction User required button1 SButton takes button type SButton required button2 SButton takes button type SButton required menu1 SDropMenu takes dropmenu type SDropMenu required menu2 SDropMenu takes dropmenu type SDropMenu required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT view () # Returns: Name Type Description view ui . View discord.ui.View Btn2And3DropMenu # __init__ ( author , button1 , button2 , menu1 , menu2 , menu3 , * , timeout = DEFAULT_TIMEOUT ) # Responsive Buttons and DropMenus Parameters: Name Type Description Default author discord . Member Interaction User required button1 SButton takes button type SButton required button2 SButton takes button type SButton required menu1 SDropMenu takes dropmenu type SDropMenu required menu2 SDropMenu takes dropmenu type SDropMenu required menu3 SDropMenu takes dropmenu type SDropMenu required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT view () # Returns: Name Type Description view ui . View discord.ui.View Btn2AndDropMenu # __init__ ( author , button1 , button2 , menu1 , * , timeout = DEFAULT_TIMEOUT ) # Responsive Buttons and DropMenus Parameters: Name Type Description Default author discord . Member Interaction User required button1 SButton takes button type SButton required button2 SButton takes button type SButton required menu1 SDropMenu takes Dropmenu type SDropMenu required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT view () # Returns: Name Type Description view ui . View discord.ui.View Btn3And2DropMenu # __init__ ( author , button1 , button2 , button3 , menu1 , menu2 , * , timeout = DEFAULT_TIMEOUT ) # Responsive Buttons and DropMenus Parameters: Name Type Description Default author discord . Member Interaction User required button1 SButton takes button type SButton required button2 SButton takes button type SButton required button3 SButton takes button type SButton required menu1 SDropMenu takes dropmenu type SDropMenu required menu2 SDropMenu takes dropmenu type SDropMenu required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT view () # Returns: Name Type Description view ui . View discord.ui.View Btn3AndDropMenu # __init__ ( author , button1 , button2 , button3 , menu1 , * , timeout = DEFAULT_TIMEOUT ) # Responsive Buttons and DropMenus Parameters: Name Type Description Default author discord . Member Interaction User required button1 SButton takes button type SButton required button2 SButton takes button type SButton required button3 SButton takes button type SButton required menu1 SDropMenu takes dropmenu type SDropMenu required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT view () # Returns: Name Type Description view ui . View discord.ui.View Btn4AndDropMenu # __init__ ( author , button1 , button2 , button3 , button4 , menu1 , * , timeout = DEFAULT_TIMEOUT ) # Responsive Buttons and DropMenus Parameters: Name Type Description Default author discord . Member Interaction User required button1 SButton takes button type SButton required button2 SButton takes button type SButton required button3 SButton takes button type SButton required button4 SButton takes button type SButton required menu1 SDropMenu takes dropmenu type SDropMenu required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT view () # Returns: Name Type Description view ui . View discord.ui.View BtnAnd2DropMenu # __init__ ( author , button1 , menu1 , menu2 , * , timeout = DEFAULT_TIMEOUT ) # Responsive Buttons and DropMenus Parameters: Name Type Description Default author discord . Member Interaction User required button1 SButton takes button type SButton required menu1 SDropMenu takes dropmenu type SDropMenu required menu2 SDropMenu takes dropmenu type SDropMenu required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT view () # Returns: Name Type Description view ui . View discord.ui.View BtnAnd3DropMenu # __init__ ( author , button1 , menu1 , menu2 , menu3 , * , timeout = DEFAULT_TIMEOUT ) # Responsive Buttons and DropMenus Parameters: Name Type Description Default author discord . Member Interaction User required button1 SButton takes button type SButton required menu1 SDropMenu takes dropmenu type SDropMenu required menu2 SDropMenu takes dropmenu type SDropMenu required menu3 SDropMenu takes dropmenu type SDropMenu required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT view () # Returns: Name Type Description view ui . View discord.ui.View BtnAnd4DropMenu # __init__ ( author , button1 , menu1 , menu2 , menu3 , menu4 , * , timeout = DEFAULT_TIMEOUT ) # Responsive Buttons and DropMenus Parameters: Name Type Description Default author discord . Member Interaction User required button1 SButton takes button type SButton required menu1 SDropMenu takes dropmenu type SDropMenu required menu2 SDropMenu takes dropmenu type SDropMenu required menu3 SDropMenu takes dropmenu type SDropMenu required menu4 SDropMenu takes dropmenu type SDropMenu required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT view () # Returns: Name Type Description view ui . View discord.ui.View BtnAndDropMenu # __init__ ( author , button1 , menu1 , * , timeout = DEFAULT_TIMEOUT ) # Responsive Buttons and DropMenus Parameters: Name Type Description Default author discord . Member Interaction User required button1 SButton takes button type SButton required menu1 SDropMenu takes dropmenu type SDropMenu required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT view () # Returns: Name Type Description view ui . View discord.ui.View MultiBtnAndDropMenu # __init__ ( author , buttons , menus , * , timeout = DEFAULT_TIMEOUT ) # Responsive Buttons and DropMenus Parameters: Name Type Description Default author discord . Member Interaction User required buttons List [ SButton ] takes List of button type SButton required menus List [ SDropMenu ] takes List of dropmenu type SDropMenu required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT view () # Returns: Name Type Description view ui . View discord.ui.View MultiBtnsAndMenus # __init__ ( author , components , * , timeout = DEFAULT_TIMEOUT ) # \ud83c\udf1f Full Flexibility Responsive Buttons and DropMenus Parameters: Name Type Description Default author discord . Member Interaction User required components List [ Union [ SButton , SDropMenu ]] Takes List of components (both buttons and drop menus) required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT view () # Returns: Name Type Description view ui . View discord.ui.View","title":"Combinations"},{"location":"user-guide/combinations/#combinations","text":"combining of both buttons and dropmenus","title":"Combinations"},{"location":"user-guide/combinations/#btns_menus.Combinations.Btn2And2DropMenu","text":"","title":"Btn2And2DropMenu"},{"location":"user-guide/combinations/#btns_menus.Combinations.Btn2And2DropMenu.__init__","text":"Responsive Buttons and DropMenus Parameters: Name Type Description Default author discord . Member Interaction User required button1 SButton takes button type SButton required button2 SButton takes button type SButton required menu1 SDropMenu takes dropmenu type SDropMenu required menu2 SDropMenu takes dropmenu type SDropMenu required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT","title":"__init__()"},{"location":"user-guide/combinations/#btns_menus.Combinations.Btn2And2DropMenu.view","text":"Returns: Name Type Description view ui . View discord.ui.View","title":"view()"},{"location":"user-guide/combinations/#btns_menus.Combinations.Btn2And3DropMenu","text":"","title":"Btn2And3DropMenu"},{"location":"user-guide/combinations/#btns_menus.Combinations.Btn2And3DropMenu.__init__","text":"Responsive Buttons and DropMenus Parameters: Name Type Description Default author discord . Member Interaction User required button1 SButton takes button type SButton required button2 SButton takes button type SButton required menu1 SDropMenu takes dropmenu type SDropMenu required menu2 SDropMenu takes dropmenu type SDropMenu required menu3 SDropMenu takes dropmenu type SDropMenu required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT","title":"__init__()"},{"location":"user-guide/combinations/#btns_menus.Combinations.Btn2And3DropMenu.view","text":"Returns: Name Type Description view ui . View discord.ui.View","title":"view()"},{"location":"user-guide/combinations/#btns_menus.Combinations.Btn2AndDropMenu","text":"","title":"Btn2AndDropMenu"},{"location":"user-guide/combinations/#btns_menus.Combinations.Btn2AndDropMenu.__init__","text":"Responsive Buttons and DropMenus Parameters: Name Type Description Default author discord . Member Interaction User required button1 SButton takes button type SButton required button2 SButton takes button type SButton required menu1 SDropMenu takes Dropmenu type SDropMenu required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT","title":"__init__()"},{"location":"user-guide/combinations/#btns_menus.Combinations.Btn2AndDropMenu.view","text":"Returns: Name Type Description view ui . View discord.ui.View","title":"view()"},{"location":"user-guide/combinations/#btns_menus.Combinations.Btn3And2DropMenu","text":"","title":"Btn3And2DropMenu"},{"location":"user-guide/combinations/#btns_menus.Combinations.Btn3And2DropMenu.__init__","text":"Responsive Buttons and DropMenus Parameters: Name Type Description Default author discord . Member Interaction User required button1 SButton takes button type SButton required button2 SButton takes button type SButton required button3 SButton takes button type SButton required menu1 SDropMenu takes dropmenu type SDropMenu required menu2 SDropMenu takes dropmenu type SDropMenu required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT","title":"__init__()"},{"location":"user-guide/combinations/#btns_menus.Combinations.Btn3And2DropMenu.view","text":"Returns: Name Type Description view ui . View discord.ui.View","title":"view()"},{"location":"user-guide/combinations/#btns_menus.Combinations.Btn3AndDropMenu","text":"","title":"Btn3AndDropMenu"},{"location":"user-guide/combinations/#btns_menus.Combinations.Btn3AndDropMenu.__init__","text":"Responsive Buttons and DropMenus Parameters: Name Type Description Default author discord . Member Interaction User required button1 SButton takes button type SButton required button2 SButton takes button type SButton required button3 SButton takes button type SButton required menu1 SDropMenu takes dropmenu type SDropMenu required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT","title":"__init__()"},{"location":"user-guide/combinations/#btns_menus.Combinations.Btn3AndDropMenu.view","text":"Returns: Name Type Description view ui . View discord.ui.View","title":"view()"},{"location":"user-guide/combinations/#btns_menus.Combinations.Btn4AndDropMenu","text":"","title":"Btn4AndDropMenu"},{"location":"user-guide/combinations/#btns_menus.Combinations.Btn4AndDropMenu.__init__","text":"Responsive Buttons and DropMenus Parameters: Name Type Description Default author discord . Member Interaction User required button1 SButton takes button type SButton required button2 SButton takes button type SButton required button3 SButton takes button type SButton required button4 SButton takes button type SButton required menu1 SDropMenu takes dropmenu type SDropMenu required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT","title":"__init__()"},{"location":"user-guide/combinations/#btns_menus.Combinations.Btn4AndDropMenu.view","text":"Returns: Name Type Description view ui . View discord.ui.View","title":"view()"},{"location":"user-guide/combinations/#btns_menus.Combinations.BtnAnd2DropMenu","text":"","title":"BtnAnd2DropMenu"},{"location":"user-guide/combinations/#btns_menus.Combinations.BtnAnd2DropMenu.__init__","text":"Responsive Buttons and DropMenus Parameters: Name Type Description Default author discord . Member Interaction User required button1 SButton takes button type SButton required menu1 SDropMenu takes dropmenu type SDropMenu required menu2 SDropMenu takes dropmenu type SDropMenu required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT","title":"__init__()"},{"location":"user-guide/combinations/#btns_menus.Combinations.BtnAnd2DropMenu.view","text":"Returns: Name Type Description view ui . View discord.ui.View","title":"view()"},{"location":"user-guide/combinations/#btns_menus.Combinations.BtnAnd3DropMenu","text":"","title":"BtnAnd3DropMenu"},{"location":"user-guide/combinations/#btns_menus.Combinations.BtnAnd3DropMenu.__init__","text":"Responsive Buttons and DropMenus Parameters: Name Type Description Default author discord . Member Interaction User required button1 SButton takes button type SButton required menu1 SDropMenu takes dropmenu type SDropMenu required menu2 SDropMenu takes dropmenu type SDropMenu required menu3 SDropMenu takes dropmenu type SDropMenu required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT","title":"__init__()"},{"location":"user-guide/combinations/#btns_menus.Combinations.BtnAnd3DropMenu.view","text":"Returns: Name Type Description view ui . View discord.ui.View","title":"view()"},{"location":"user-guide/combinations/#btns_menus.Combinations.BtnAnd4DropMenu","text":"","title":"BtnAnd4DropMenu"},{"location":"user-guide/combinations/#btns_menus.Combinations.BtnAnd4DropMenu.__init__","text":"Responsive Buttons and DropMenus Parameters: Name Type Description Default author discord . Member Interaction User required button1 SButton takes button type SButton required menu1 SDropMenu takes dropmenu type SDropMenu required menu2 SDropMenu takes dropmenu type SDropMenu required menu3 SDropMenu takes dropmenu type SDropMenu required menu4 SDropMenu takes dropmenu type SDropMenu required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT","title":"__init__()"},{"location":"user-guide/combinations/#btns_menus.Combinations.BtnAnd4DropMenu.view","text":"Returns: Name Type Description view ui . View discord.ui.View","title":"view()"},{"location":"user-guide/combinations/#btns_menus.Combinations.BtnAndDropMenu","text":"","title":"BtnAndDropMenu"},{"location":"user-guide/combinations/#btns_menus.Combinations.BtnAndDropMenu.__init__","text":"Responsive Buttons and DropMenus Parameters: Name Type Description Default author discord . Member Interaction User required button1 SButton takes button type SButton required menu1 SDropMenu takes dropmenu type SDropMenu required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT","title":"__init__()"},{"location":"user-guide/combinations/#btns_menus.Combinations.BtnAndDropMenu.view","text":"Returns: Name Type Description view ui . View discord.ui.View","title":"view()"},{"location":"user-guide/combinations/#btns_menus.Combinations.MultiBtnAndDropMenu","text":"","title":"MultiBtnAndDropMenu"},{"location":"user-guide/combinations/#btns_menus.Combinations.MultiBtnAndDropMenu.__init__","text":"Responsive Buttons and DropMenus Parameters: Name Type Description Default author discord . Member Interaction User required buttons List [ SButton ] takes List of button type SButton required menus List [ SDropMenu ] takes List of dropmenu type SDropMenu required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT","title":"__init__()"},{"location":"user-guide/combinations/#btns_menus.Combinations.MultiBtnAndDropMenu.view","text":"Returns: Name Type Description view ui . View discord.ui.View","title":"view()"},{"location":"user-guide/combinations/#btns_menus.Combinations.MultiBtnsAndMenus","text":"","title":"MultiBtnsAndMenus"},{"location":"user-guide/combinations/#btns_menus.Combinations.MultiBtnsAndMenus.__init__","text":"\ud83c\udf1f Full Flexibility Responsive Buttons and DropMenus Parameters: Name Type Description Default author discord . Member Interaction User required components List [ Union [ SButton , SDropMenu ]] Takes List of components (both buttons and drop menus) required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT","title":"__init__()"},{"location":"user-guide/combinations/#btns_menus.Combinations.MultiBtnsAndMenus.view","text":"Returns: Name Type Description view ui . View discord.ui.View","title":"view()"},{"location":"user-guide/dropmenus/","text":"DropMenus # SDropMenu # after_resp : Optional [ Dict ] property # It's a property used to get all options which are to be changed after option (on-select) of the DropMenu Returns: Name Type Description UpdatedOptions Optional [ Dict ] Dict if there is a query defined or else returns None args : Dict property # It's a property used to get kwargs of the DropMenu Aliases: ['args', 'kwargs'] Returns: Name Type Description Options Dict Dictionary of options of a Button author : Optional [ discord . Member ] property # It's a property used to get author of the DropMenu Returns: Name Type Description author Optional [ discord . Member ] returns a user obj if one exists hidden : bool property # It's a property used to get hidden parm of the DropMenu Returns: Name Type Description hidden bool id : Optional [ str ] property # It's a property used to get ID of the DropMenu Returns: Name Type Description custom_id Optional [ str ] DropMenu ID is_ephemeral : bool property # It's a property used to check whether it's ephemeral or not Returns: Name Type Description ephemeral bool true, if the dropmenu response type is ephemeral or else false placeholder : Optional [ str ] property # It's a property used to get placeholder of the DropMenu Returns: Name Type Description placeholder Optional [ str ] returns value of placeholder queries : Optional [ List ] property # It's a property used to get all queries of the DropMenu Returns: Name Type Description queries Optional [ List ] List (or) None __init__ ( * , custom_id = None , placeholder = None , min_values = 1 , max_values = 1 , options = None , disabled = False , row = None , content = None , response = None , rewrite = False , ephemeral = False , hidden = False , author = None , verify = True ) # It is a decorator used to create a DropMenu overwriting ui.Select Parameters: Name Type Description Default custom_id str Unique ID of the Button None placeholder Optional [ str ] A short placeholder for DropMenu None min_values int Limiting the user to select atleast minimum options in DropMenu 1 max_values int Limiting the user to select atmost maximum options in DropMenu 1 options List [ SelectOption ] Options which are shown in DropMenu and can be selected by interacted user None disabled bool It is used to enable/disable the DropMenu, i.e. Preventing user from using it False row Optional [ int ] Places the DropMenu in given Row None content Optional [ str ] content of the message None response Optional [ Union [ str , discord . Embed ]] Sends the message (str, embed) in user channel None rewrite bool It is used to send the message by editing the original message rather than sending a new one False ephemeral bool It is used to send the message where it's only visible to interacted user or to all False hidden bool It hides the Button from View False author discord . Member Interaction User None verify bool It is used to make the func to check for author parameter or not True add_coro_func ( function , * args , ** kwargs ) async # It's an asynchronous function which stores same function type and adds the func to DropMenu for execution after getting an option selected Parameters: Name Type Description Default function Callable takes asynchronous function required *args Any takes args of the function provided by a user () **kwargs Any takes kwargs of the function provided by a user {} add_func ( function , * args , ** kwargs ) # It's a function which stores same function type and adds the func to DropMenu for execution after getting an option selected Parameters: Name Type Description Default function Callable takes a function required *args Any takes args of the function provided by a user () **kwargs Any takes kwargs of the function provided by a user {} add_queries ( * queries ) # It's an event type function used to add queries for the DropMenu Here the queries (option-name(s)) will be mapped with one response Parameters: Name Type Description Default *queries Tuple [ List [ str ], Union [ str , discord . Embed ]] takes list of option-name(s) and response () add_query ( * query ) # It's an event type function used to add queries for the DropMenu Here the query (option-name) will be mapped with one response Parameters: Name Type Description Default *query Tuple [ str , Union [ str , discord . Embed ]] takes option-name and response () after_response ( ** options ) # It's an event type function which changes the provided options after option (on-select) of the DropMenu Parameters: Name Type Description Default **options Any takes dropmenu options {} Raises: Type Description MenuException raises the exception if the option is invalid convert_resp ( content , values ) staticmethod # It's not a reusable function Used for formatting the provided content with respective values Parameters: Name Type Description Default content str takes content/ message required values List selected values of the DropMenu required Raises: Type Description MenuException raises the exception if the option is invalid has_any_role ( * roles , error_msg = None ) # It's used to check whether the interaction user has any one of the mentioned roles of interaction guild Parameters: Name Type Description Default *roles Union [ int , str ] Takes either ID's or Name's of the roles of interaction guild () error_msg Union [ str , discord . Embed ] Sends a message to the user (Interaction.User) if the condition not satisfies None has_permissions ( * , error_msg = None , ** perms ) # It's used to check whether the interaction user has the mentioned permissions of the interaction guild/ channel Parameters: Name Type Description Default error_msg Union [ str , discord . Embed ] Sends a message to the interaction user if the condition not satisfies None **perms Dict [ str , bool ] Takes the permissions flags (discord.Permissions.VALID_FLAGS) {} has_roles ( * roles , error_msg = None ) # It's used to check whether the interaction user has the mentioned roles of interaction guild Parameters: Name Type Description Default *roles Union [ int , str ] Takes either ID's or Name's of the roles of interaction guild () error_msg Union [ str , discord . Embed ] Sends a message to the user (Interaction.User) if the condition not satisfies None is_any_user ( * users , error_msg = None ) # It's used to check whether the interaction user is in mentioned users or not Parameters: Name Type Description Default *users Union [ str , int ] Takes either ID's or Name's of the members of interaction guild () error_msg Union [ str , discord . Embed ] Sends a message to the interaction user if the condition not satisfies None is_author ( error_msg = None ) # It's used to check whether the interaction user and SButton.author are same or not Parameters: Name Type Description Default error_msg Union [ str , discord . Embed ] Sends a message to the interaction user if the condition not satisfies None is_owner ( error_msg = None ) # It's used to check whether the interaction user is the owner of interaction guild Parameters: Name Type Description Default error_msg Union [ str , discord . Embed ] Sends a message to the user (Interaction.User) if the condition not satisfies None update ( ** options ) # Updates the options of the SDropMenu Parameters: Name Type Description Default **options Any takes SDropMenu options {} Raises: Type Description MenuException raises the exception if the option is invalid update_one ( details , option ) # Updates the option of the SDropMenu Parameters: Name Type Description Default details Any Takes any datatype for updating required option str The option which should be overwritten required Raises: Type Description MenuException raises the exception if the option is invalid Types of DropMenus # DuoDropMenu # __init__ ( author , drop_menu1 , drop_menu2 , / , timeout = DEFAULT_TIMEOUT ) # Responsive DropMenus Parameters: Name Type Description Default author discord . Member Interaction User required drop_menu1 SDropMenu Takes dropmenu type SDropmenu required drop_menu2 SDropMenu Takes dropmenu type SDropmenu required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT view () # Returns: Name Type Description view ui . View discord.ui.View MultiDropMenu # __init__ ( author , menus , / , timeout = DEFAULT_TIMEOUT ) # Responsive Multi DropMenus Parameters: Name Type Description Default author discord . Member Interaction User required menus List [ SDropMenu ] takes List of dropmenu type SDropMenu required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT view () # Returns: Name Type Description view ui . View discord.ui.View QuartetDropMenu # __init__ ( author , drop_menu1 , drop_menu2 , drop_menu3 , drop_menu4 , / , timeout = DEFAULT_TIMEOUT ) # Responsive DropMenus Parameters: Name Type Description Default author discord . Member Interaction User required drop_menu1 SDropMenu takes dropmenu type SDropMenu required drop_menu2 SDropMenu takes dropmenu type SDropMenu required drop_menu3 SDropMenu takes dropmenu type SDropMenu required drop_menu4 SDropMenu takes dropmenu type SDropMenu required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT view () # Returns: Name Type Description view ui . View discord.ui.View QuintetDropMenu # __init__ ( author , drop_menu1 , drop_menu2 , drop_menu3 , drop_menu4 , drop_menu5 , / , timeout = DEFAULT_TIMEOUT ) # Responsive DropMenus Parameters: Name Type Description Default author discord . Member Interaction User required drop_menu1 SDropMenu takes dropmenu type SDropMenu required drop_menu2 SDropMenu takes dropmenu type SDropMenu required drop_menu3 SDropMenu takes dropmenu type SDropMenu required drop_menu4 SDropMenu takes dropmenu type SDropMenu required drop_menu5 SDropMenu takes dropmenu type SDropMenu required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT view () # Returns: Name Type Description view ui . View discord.ui.View SingleDropMenu # __init__ ( author , drop_menu1 , / , timeout = DEFAULT_TIMEOUT ) # Responsive DropMenu Parameters: Name Type Description Default author discord . Member Interaction User required drop_menu1 SDropMenu Takes dropmenu type SDropMenu required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT view () # Returns: Name Type Description view ui . View discord.ui.View TrioDropMenu # __init__ ( author , drop_menu1 , drop_menu2 , drop_menu3 , / , timeout = DEFAULT_TIMEOUT ) # Responsive DropMenus Parameters: Name Type Description Default author discord . Member Interaction User required drop_menu1 SDropMenu takes dropmenu type SDropMenu required drop_menu2 SDropMenu takes dropmenu type SDropMenu required drop_menu3 SDropMenu takes dropmenu type SDropMenu required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT view () # Returns: Name Type Description view ui . View discord.ui.View","title":"DropMenus"},{"location":"user-guide/dropmenus/#dropmenus","text":"","title":"DropMenus"},{"location":"user-guide/dropmenus/#sdropmenu","text":"","title":"SDropMenu"},{"location":"user-guide/dropmenus/#btns_menus.builds.menu_.SDropMenu.after_resp","text":"It's a property used to get all options which are to be changed after option (on-select) of the DropMenu Returns: Name Type Description UpdatedOptions Optional [ Dict ] Dict if there is a query defined or else returns None","title":"after_resp"},{"location":"user-guide/dropmenus/#btns_menus.builds.menu_.SDropMenu.args","text":"It's a property used to get kwargs of the DropMenu Aliases: ['args', 'kwargs'] Returns: Name Type Description Options Dict Dictionary of options of a Button","title":"args"},{"location":"user-guide/dropmenus/#btns_menus.builds.menu_.SDropMenu.author","text":"It's a property used to get author of the DropMenu Returns: Name Type Description author Optional [ discord . Member ] returns a user obj if one exists","title":"author"},{"location":"user-guide/dropmenus/#btns_menus.builds.menu_.SDropMenu.hidden","text":"It's a property used to get hidden parm of the DropMenu Returns: Name Type Description hidden bool","title":"hidden"},{"location":"user-guide/dropmenus/#btns_menus.builds.menu_.SDropMenu.id","text":"It's a property used to get ID of the DropMenu Returns: Name Type Description custom_id Optional [ str ] DropMenu ID","title":"id"},{"location":"user-guide/dropmenus/#btns_menus.builds.menu_.SDropMenu.is_ephemeral","text":"It's a property used to check whether it's ephemeral or not Returns: Name Type Description ephemeral bool true, if the dropmenu response type is ephemeral or else false","title":"is_ephemeral"},{"location":"user-guide/dropmenus/#btns_menus.builds.menu_.SDropMenu.placeholder","text":"It's a property used to get placeholder of the DropMenu Returns: Name Type Description placeholder Optional [ str ] returns value of placeholder","title":"placeholder"},{"location":"user-guide/dropmenus/#btns_menus.builds.menu_.SDropMenu.queries","text":"It's a property used to get all queries of the DropMenu Returns: Name Type Description queries Optional [ List ] List (or) None","title":"queries"},{"location":"user-guide/dropmenus/#btns_menus.builds.menu_.SDropMenu.__init__","text":"It is a decorator used to create a DropMenu overwriting ui.Select Parameters: Name Type Description Default custom_id str Unique ID of the Button None placeholder Optional [ str ] A short placeholder for DropMenu None min_values int Limiting the user to select atleast minimum options in DropMenu 1 max_values int Limiting the user to select atmost maximum options in DropMenu 1 options List [ SelectOption ] Options which are shown in DropMenu and can be selected by interacted user None disabled bool It is used to enable/disable the DropMenu, i.e. Preventing user from using it False row Optional [ int ] Places the DropMenu in given Row None content Optional [ str ] content of the message None response Optional [ Union [ str , discord . Embed ]] Sends the message (str, embed) in user channel None rewrite bool It is used to send the message by editing the original message rather than sending a new one False ephemeral bool It is used to send the message where it's only visible to interacted user or to all False hidden bool It hides the Button from View False author discord . Member Interaction User None verify bool It is used to make the func to check for author parameter or not True","title":"__init__()"},{"location":"user-guide/dropmenus/#btns_menus.builds.menu_.SDropMenu.add_coro_func","text":"It's an asynchronous function which stores same function type and adds the func to DropMenu for execution after getting an option selected Parameters: Name Type Description Default function Callable takes asynchronous function required *args Any takes args of the function provided by a user () **kwargs Any takes kwargs of the function provided by a user {}","title":"add_coro_func()"},{"location":"user-guide/dropmenus/#btns_menus.builds.menu_.SDropMenu.add_func","text":"It's a function which stores same function type and adds the func to DropMenu for execution after getting an option selected Parameters: Name Type Description Default function Callable takes a function required *args Any takes args of the function provided by a user () **kwargs Any takes kwargs of the function provided by a user {}","title":"add_func()"},{"location":"user-guide/dropmenus/#btns_menus.builds.menu_.SDropMenu.add_queries","text":"It's an event type function used to add queries for the DropMenu Here the queries (option-name(s)) will be mapped with one response Parameters: Name Type Description Default *queries Tuple [ List [ str ], Union [ str , discord . Embed ]] takes list of option-name(s) and response ()","title":"add_queries()"},{"location":"user-guide/dropmenus/#btns_menus.builds.menu_.SDropMenu.add_query","text":"It's an event type function used to add queries for the DropMenu Here the query (option-name) will be mapped with one response Parameters: Name Type Description Default *query Tuple [ str , Union [ str , discord . Embed ]] takes option-name and response ()","title":"add_query()"},{"location":"user-guide/dropmenus/#btns_menus.builds.menu_.SDropMenu.after_response","text":"It's an event type function which changes the provided options after option (on-select) of the DropMenu Parameters: Name Type Description Default **options Any takes dropmenu options {} Raises: Type Description MenuException raises the exception if the option is invalid","title":"after_response()"},{"location":"user-guide/dropmenus/#btns_menus.builds.menu_.SDropMenu.convert_resp","text":"It's not a reusable function Used for formatting the provided content with respective values Parameters: Name Type Description Default content str takes content/ message required values List selected values of the DropMenu required Raises: Type Description MenuException raises the exception if the option is invalid","title":"convert_resp()"},{"location":"user-guide/dropmenus/#btns_menus.builds.menu_.SDropMenu.has_any_role","text":"It's used to check whether the interaction user has any one of the mentioned roles of interaction guild Parameters: Name Type Description Default *roles Union [ int , str ] Takes either ID's or Name's of the roles of interaction guild () error_msg Union [ str , discord . Embed ] Sends a message to the user (Interaction.User) if the condition not satisfies None","title":"has_any_role()"},{"location":"user-guide/dropmenus/#btns_menus.builds.menu_.SDropMenu.has_permissions","text":"It's used to check whether the interaction user has the mentioned permissions of the interaction guild/ channel Parameters: Name Type Description Default error_msg Union [ str , discord . Embed ] Sends a message to the interaction user if the condition not satisfies None **perms Dict [ str , bool ] Takes the permissions flags (discord.Permissions.VALID_FLAGS) {}","title":"has_permissions()"},{"location":"user-guide/dropmenus/#btns_menus.builds.menu_.SDropMenu.has_roles","text":"It's used to check whether the interaction user has the mentioned roles of interaction guild Parameters: Name Type Description Default *roles Union [ int , str ] Takes either ID's or Name's of the roles of interaction guild () error_msg Union [ str , discord . Embed ] Sends a message to the user (Interaction.User) if the condition not satisfies None","title":"has_roles()"},{"location":"user-guide/dropmenus/#btns_menus.builds.menu_.SDropMenu.is_any_user","text":"It's used to check whether the interaction user is in mentioned users or not Parameters: Name Type Description Default *users Union [ str , int ] Takes either ID's or Name's of the members of interaction guild () error_msg Union [ str , discord . Embed ] Sends a message to the interaction user if the condition not satisfies None","title":"is_any_user()"},{"location":"user-guide/dropmenus/#btns_menus.builds.menu_.SDropMenu.is_author","text":"It's used to check whether the interaction user and SButton.author are same or not Parameters: Name Type Description Default error_msg Union [ str , discord . Embed ] Sends a message to the interaction user if the condition not satisfies None","title":"is_author()"},{"location":"user-guide/dropmenus/#btns_menus.builds.menu_.SDropMenu.is_owner","text":"It's used to check whether the interaction user is the owner of interaction guild Parameters: Name Type Description Default error_msg Union [ str , discord . Embed ] Sends a message to the user (Interaction.User) if the condition not satisfies None","title":"is_owner()"},{"location":"user-guide/dropmenus/#btns_menus.builds.menu_.SDropMenu.update","text":"Updates the options of the SDropMenu Parameters: Name Type Description Default **options Any takes SDropMenu options {} Raises: Type Description MenuException raises the exception if the option is invalid","title":"update()"},{"location":"user-guide/dropmenus/#btns_menus.builds.menu_.SDropMenu.update_one","text":"Updates the option of the SDropMenu Parameters: Name Type Description Default details Any Takes any datatype for updating required option str The option which should be overwritten required Raises: Type Description MenuException raises the exception if the option is invalid","title":"update_one()"},{"location":"user-guide/dropmenus/#types_of_dropmenus","text":"","title":"Types of DropMenus"},{"location":"user-guide/dropmenus/#btns_menus.DropMenus.DuoDropMenu","text":"","title":"DuoDropMenu"},{"location":"user-guide/dropmenus/#btns_menus.DropMenus.DuoDropMenu.__init__","text":"Responsive DropMenus Parameters: Name Type Description Default author discord . Member Interaction User required drop_menu1 SDropMenu Takes dropmenu type SDropmenu required drop_menu2 SDropMenu Takes dropmenu type SDropmenu required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT","title":"__init__()"},{"location":"user-guide/dropmenus/#btns_menus.DropMenus.DuoDropMenu.view","text":"Returns: Name Type Description view ui . View discord.ui.View","title":"view()"},{"location":"user-guide/dropmenus/#btns_menus.DropMenus.MultiDropMenu","text":"","title":"MultiDropMenu"},{"location":"user-guide/dropmenus/#btns_menus.DropMenus.MultiDropMenu.__init__","text":"Responsive Multi DropMenus Parameters: Name Type Description Default author discord . Member Interaction User required menus List [ SDropMenu ] takes List of dropmenu type SDropMenu required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT","title":"__init__()"},{"location":"user-guide/dropmenus/#btns_menus.DropMenus.MultiDropMenu.view","text":"Returns: Name Type Description view ui . View discord.ui.View","title":"view()"},{"location":"user-guide/dropmenus/#btns_menus.DropMenus.QuartetDropMenu","text":"","title":"QuartetDropMenu"},{"location":"user-guide/dropmenus/#btns_menus.DropMenus.QuartetDropMenu.__init__","text":"Responsive DropMenus Parameters: Name Type Description Default author discord . Member Interaction User required drop_menu1 SDropMenu takes dropmenu type SDropMenu required drop_menu2 SDropMenu takes dropmenu type SDropMenu required drop_menu3 SDropMenu takes dropmenu type SDropMenu required drop_menu4 SDropMenu takes dropmenu type SDropMenu required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT","title":"__init__()"},{"location":"user-guide/dropmenus/#btns_menus.DropMenus.QuartetDropMenu.view","text":"Returns: Name Type Description view ui . View discord.ui.View","title":"view()"},{"location":"user-guide/dropmenus/#btns_menus.DropMenus.QuintetDropMenu","text":"","title":"QuintetDropMenu"},{"location":"user-guide/dropmenus/#btns_menus.DropMenus.QuintetDropMenu.__init__","text":"Responsive DropMenus Parameters: Name Type Description Default author discord . Member Interaction User required drop_menu1 SDropMenu takes dropmenu type SDropMenu required drop_menu2 SDropMenu takes dropmenu type SDropMenu required drop_menu3 SDropMenu takes dropmenu type SDropMenu required drop_menu4 SDropMenu takes dropmenu type SDropMenu required drop_menu5 SDropMenu takes dropmenu type SDropMenu required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT","title":"__init__()"},{"location":"user-guide/dropmenus/#btns_menus.DropMenus.QuintetDropMenu.view","text":"Returns: Name Type Description view ui . View discord.ui.View","title":"view()"},{"location":"user-guide/dropmenus/#btns_menus.DropMenus.SingleDropMenu","text":"","title":"SingleDropMenu"},{"location":"user-guide/dropmenus/#btns_menus.DropMenus.SingleDropMenu.__init__","text":"Responsive DropMenu Parameters: Name Type Description Default author discord . Member Interaction User required drop_menu1 SDropMenu Takes dropmenu type SDropMenu required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT","title":"__init__()"},{"location":"user-guide/dropmenus/#btns_menus.DropMenus.SingleDropMenu.view","text":"Returns: Name Type Description view ui . View discord.ui.View","title":"view()"},{"location":"user-guide/dropmenus/#btns_menus.DropMenus.TrioDropMenu","text":"","title":"TrioDropMenu"},{"location":"user-guide/dropmenus/#btns_menus.DropMenus.TrioDropMenu.__init__","text":"Responsive DropMenus Parameters: Name Type Description Default author discord . Member Interaction User required drop_menu1 SDropMenu takes dropmenu type SDropMenu required drop_menu2 SDropMenu takes dropmenu type SDropMenu required drop_menu3 SDropMenu takes dropmenu type SDropMenu required timeout Optional [ float ] Interaction Timeout DEFAULT_TIMEOUT","title":"__init__()"},{"location":"user-guide/dropmenus/#btns_menus.DropMenus.TrioDropMenu.view","text":"Returns: Name Type Description view ui . View discord.ui.View","title":"view()"},{"location":"user-guide/errors/","text":"errors # ButtonException # Bases: Exception Exceptions related to Buttons InvalidInteractionUser # Bases: ButtonException __init__ ( current_user ) # Raises this exception if a user is not same as interaction.user Parameters: Name Type Description Default current_user str user of the particular interaction required MenuException # Bases: Exception Exceptions related to DropMenus MissingAdminPerms # Bases: ButtonException __init__ () # Raises this exception if a user does not have admin perms MissingAnyRole # Bases: ButtonException __init__ ( roles ) # Raises this exception if a user does not have any one of the required roles Parameters: Name Type Description Default roles List [ str ] list of missing roles required MissingPerms # Bases: ButtonException __init__ ( perms ) # Raises this exception if a user does not have required perms Parameters: Name Type Description Default perms List [ str ] list of missing permissions required MissingRoles # Bases: ButtonException __init__ ( roles ) # Raises this exception if a user does not have required roles Parameters: Name Type Description Default roles List [ str ] list of missing roles required NotInUsers # Bases: ButtonException __init__ ( users ) # Raises this exception if a user is not in any one of the given users Parameters: Name Type Description Default users List [ str ] list of valid users required PaginatorException # Bases: Exception Exceptions related to Paginator","title":"Errors"},{"location":"user-guide/errors/#errors","text":"","title":"errors"},{"location":"user-guide/errors/#btns_menus.errors.ButtonException","text":"Bases: Exception Exceptions related to Buttons","title":"ButtonException"},{"location":"user-guide/errors/#btns_menus.errors.InvalidInteractionUser","text":"Bases: ButtonException","title":"InvalidInteractionUser"},{"location":"user-guide/errors/#btns_menus.errors.InvalidInteractionUser.__init__","text":"Raises this exception if a user is not same as interaction.user Parameters: Name Type Description Default current_user str user of the particular interaction required","title":"__init__()"},{"location":"user-guide/errors/#btns_menus.errors.MenuException","text":"Bases: Exception Exceptions related to DropMenus","title":"MenuException"},{"location":"user-guide/errors/#btns_menus.errors.MissingAdminPerms","text":"Bases: ButtonException","title":"MissingAdminPerms"},{"location":"user-guide/errors/#btns_menus.errors.MissingAdminPerms.__init__","text":"Raises this exception if a user does not have admin perms","title":"__init__()"},{"location":"user-guide/errors/#btns_menus.errors.MissingAnyRole","text":"Bases: ButtonException","title":"MissingAnyRole"},{"location":"user-guide/errors/#btns_menus.errors.MissingAnyRole.__init__","text":"Raises this exception if a user does not have any one of the required roles Parameters: Name Type Description Default roles List [ str ] list of missing roles required","title":"__init__()"},{"location":"user-guide/errors/#btns_menus.errors.MissingPerms","text":"Bases: ButtonException","title":"MissingPerms"},{"location":"user-guide/errors/#btns_menus.errors.MissingPerms.__init__","text":"Raises this exception if a user does not have required perms Parameters: Name Type Description Default perms List [ str ] list of missing permissions required","title":"__init__()"},{"location":"user-guide/errors/#btns_menus.errors.MissingRoles","text":"Bases: ButtonException","title":"MissingRoles"},{"location":"user-guide/errors/#btns_menus.errors.MissingRoles.__init__","text":"Raises this exception if a user does not have required roles Parameters: Name Type Description Default roles List [ str ] list of missing roles required","title":"__init__()"},{"location":"user-guide/errors/#btns_menus.errors.NotInUsers","text":"Bases: ButtonException","title":"NotInUsers"},{"location":"user-guide/errors/#btns_menus.errors.NotInUsers.__init__","text":"Raises this exception if a user is not in any one of the given users Parameters: Name Type Description Default users List [ str ] list of valid users required","title":"__init__()"},{"location":"user-guide/errors/#btns_menus.errors.PaginatorException","text":"Bases: Exception Exceptions related to Paginator","title":"PaginatorException"},{"location":"user-guide/paginator/","text":"Paginators # Paginator # __init__ ( author , embeds , commands_list = None , pg_type = PgTypes . first , * , buttons = None , menus = None , append_before = False , footer = None , timeout = DEFAULT_TIMEOUT ) # Paginator is used to show users the given embeds in pages format using navigation Buttons and DropMenus Custom IDs for Buttons: # home, forward, backward, skip_Tofirst, skip_Tolast, delete Custom IDs for Menu: # commands-list, cmds-list Note: These ID's can be used to modify the buttons/menus in the Paginator Parameters: Name Type Description Default author discord . Member User who will interact with the Paginator required embeds List [ discord . Embed ] The list of embeds that acts as Pages required commands_list List [ SOption ] The list of options which are shown as options in a Drop Menu None pg_type PgTypes Takes the PgTypes PgTypes.first buttons List [ SButton ] List of buttons used to navigate of interact with the pages/embeds None menus List [ SDropMenu ] List of Menus used to make a user select options from it None append_before bool If true, buttons & menus will be added before default buttons & menus in Paginator and vice-versa False footer str Used to add content into text in footer of discord.Embed None timeout Optional [ Union [ int , float ]] Timeout of the interaction DEFAULT_TIMEOUT view () # Returns: Name Type Description view ui . View discord.ui.View PgTypes # enums used to define the type of paginator you want to use Available Types # first/ one second/ two third/ three Example # pg_type = PgTypes.first SOption ( * , name , embed , description = None , emoji = None ) # It's a decorator used to overwrite options in discord.ui.Select Parameters: Name Type Description Default name str label for option required embed discord . Embed If option is selected, the embed will be sent ! required description str Description for the option None emoji Union [ str , discord . Emoji , discord . PartialEmoji ] Emoji for the option None Returns: Name Type Description decorator Dict Dictionary of options","title":"Paginator"},{"location":"user-guide/paginator/#paginators","text":"","title":"Paginators"},{"location":"user-guide/paginator/#btns_menus.Paginator.Paginator","text":"","title":"Paginator"},{"location":"user-guide/paginator/#btns_menus.Paginator.Paginator.__init__","text":"Paginator is used to show users the given embeds in pages format using navigation Buttons and DropMenus","title":"__init__()"},{"location":"user-guide/paginator/#btns_menus.Paginator.Paginator.__init__--custom_ids_for_buttons","text":"home, forward, backward, skip_Tofirst, skip_Tolast, delete","title":"Custom IDs for Buttons:"},{"location":"user-guide/paginator/#btns_menus.Paginator.Paginator.__init__--custom_ids_for_menu","text":"commands-list, cmds-list Note: These ID's can be used to modify the buttons/menus in the Paginator Parameters: Name Type Description Default author discord . Member User who will interact with the Paginator required embeds List [ discord . Embed ] The list of embeds that acts as Pages required commands_list List [ SOption ] The list of options which are shown as options in a Drop Menu None pg_type PgTypes Takes the PgTypes PgTypes.first buttons List [ SButton ] List of buttons used to navigate of interact with the pages/embeds None menus List [ SDropMenu ] List of Menus used to make a user select options from it None append_before bool If true, buttons & menus will be added before default buttons & menus in Paginator and vice-versa False footer str Used to add content into text in footer of discord.Embed None timeout Optional [ Union [ int , float ]] Timeout of the interaction DEFAULT_TIMEOUT","title":"Custom IDs for Menu:"},{"location":"user-guide/paginator/#btns_menus.Paginator.Paginator.view","text":"Returns: Name Type Description view ui . View discord.ui.View","title":"view()"},{"location":"user-guide/paginator/#btns_menus.Paginator.PgTypes","text":"enums used to define the type of paginator you want to use","title":"PgTypes"},{"location":"user-guide/paginator/#btns_menus.Paginator.PgTypes--available_types","text":"first/ one second/ two third/ three","title":"Available Types"},{"location":"user-guide/paginator/#btns_menus.Paginator.PgTypes--example","text":"pg_type = PgTypes.first","title":"Example"},{"location":"user-guide/paginator/#btns_menus.Paginator.SOption","text":"It's a decorator used to overwrite options in discord.ui.Select Parameters: Name Type Description Default name str label for option required embed discord . Embed If option is selected, the embed will be sent ! required description str Description for the option None emoji Union [ str , discord . Emoji , discord . PartialEmoji ] Emoji for the option None Returns: Name Type Description decorator Dict Dictionary of options","title":"SOption()"}]}